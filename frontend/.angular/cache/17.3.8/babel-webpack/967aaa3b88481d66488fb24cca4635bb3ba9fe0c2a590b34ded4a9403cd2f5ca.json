{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class LocationService {\n  httpClient;\n  LOCATION_URL = 'https://rickandmortyapi.com/api/location/?name=';\n  SINGLE_LOCATION_API = 'https://rickandmortyapi.com/api/location/';\n  ALL_LOCATION_API = 'https://rickandmortyapi.com/api/location?page=';\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n  }\n  getLocationByName(name) {\n    return this.httpClient.get(this.LOCATION_URL + name);\n  }\n  getLocationById(id) {\n    return this.httpClient.get(this.SINGLE_LOCATION_API + id);\n  }\n  getLocations(page) {\n    return this.httpClient.get(this.ALL_LOCATION_API + page);\n  }\n  static ɵfac = function LocationService_Factory(t) {\n    return new (t || LocationService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LocationService,\n    factory: LocationService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["LocationService","httpClient","LOCATION_URL","SINGLE_LOCATION_API","ALL_LOCATION_API","constructor","getLocationByName","name","get","getLocationById","id","getLocations","page","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/Users/geen/Documents/personal/challenge-thewall9/frontend/src/app/location/location.service.ts"],"sourcesContent":["import { Location } from './location.model'\nimport { HttpClient } from '@angular/common/http'\nimport { Info } from '../common/common.model'\nimport { Injectable } from '@angular/core'\nimport { Observable } from 'rxjs'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LocationService {\n  private readonly LOCATION_URL =\n    'https://rickandmortyapi.com/api/location/?name='\n\n  private readonly SINGLE_LOCATION_API =\n    'https://rickandmortyapi.com/api/location/'\n\n  private readonly ALL_LOCATION_API =\n    'https://rickandmortyapi.com/api/location?page='\n\n  constructor(private readonly httpClient: HttpClient) {}\n\n  public getLocationByName(name: string): Observable<Location> {\n    return this.httpClient.get<Location>(this.LOCATION_URL + name)\n  }\n\n  public getLocationById(id: string): Observable<Location> {\n    return this.httpClient.get<Location>(this.SINGLE_LOCATION_API + id)\n  }\n\n  public getLocations(page: string): Observable<Info<Location[]>> {\n    return this.httpClient.get<Info<Location[]>>(this.ALL_LOCATION_API + page)\n  }\n}\n"],"mappings":";;AASA,OAAM,MAAOA,eAAe;EAUGC,UAAA;EATZC,YAAY,GAC3B,iDAAiD;EAElCC,mBAAmB,GAClC,2CAA2C;EAE5BC,gBAAgB,GAC/B,gDAAgD;EAElDC,YAA6BJ,UAAsB;IAAtB,KAAAA,UAAU,GAAVA,UAAU;EAAe;EAE/CK,iBAAiBA,CAACC,IAAY;IACnC,OAAO,IAAI,CAACN,UAAU,CAACO,GAAG,CAAW,IAAI,CAACN,YAAY,GAAGK,IAAI,CAAC;EAChE;EAEOE,eAAeA,CAACC,EAAU;IAC/B,OAAO,IAAI,CAACT,UAAU,CAACO,GAAG,CAAW,IAAI,CAACL,mBAAmB,GAAGO,EAAE,CAAC;EACrE;EAEOC,YAAYA,CAACC,IAAY;IAC9B,OAAO,IAAI,CAACX,UAAU,CAACO,GAAG,CAAmB,IAAI,CAACJ,gBAAgB,GAAGQ,IAAI,CAAC;EAC5E;;qBAtBWZ,eAAe,EAAAa,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;;WAAfhB,eAAe;IAAAiB,OAAA,EAAfjB,eAAe,CAAAkB,IAAA;IAAAC,UAAA,EAFd;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}